openapi: 3.0.1
info:
  title: Scheduler management API
  description: This is scheduler management API server. Use this API to manage jobs.
  contact: {}
  version: "1.0"
servers:
  - url: //http://localhost:8000/v1
paths:
  /jobs:
    get:
      tags:
        - jobs
      summary: List jobs
      description: List jobs with the given limit and offset
      parameters:
        - name: limit
          in: query
          description: Limit
          schema:
            type: integer
        - name: offset
          in: query
          description: Offset
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/model.Job"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
    post:
      tags:
        - jobs
      summary: Create a job
      description: Create a job with the given job create request
      requestBody:
        description: Job Create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/model.JobCreate"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.Job"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
      x-codegen-request-body-name: job
  /jobs/{id}:
    get:
      tags:
        - jobs
      summary: Get a job
      description: Get a job with the given job ID
      parameters:
        - name: id
          in: path
          description: Job ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.Job"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
    put:
      tags:
        - jobs
      summary: Update a job
      description: Update a job with the given job update request
      parameters:
        - name: id
          in: path
          description: Job ID
          required: true
          schema:
            type: string
      requestBody:
        description: Job Update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/model.JobUpdate"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.Job"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
      x-codegen-request-body-name: job
    delete:
      tags:
        - jobs
      summary: Delete a job
      description: Delete a job with the given job ID
      parameters:
        - name: id
          in: path
          description: Job ID
          required: true
          schema:
            type: string
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
  /jobs/{id}/executions:
    get:
      tags:
        - jobs
      summary: Get job executions
      description:
        Get job executions with the given job ID, failed only flag, limit
        and offset
      parameters:
        - name: id
          in: path
          description: Job ID
          required: true
          schema:
            type: string
        - name: failedOnly
          in: query
          description: Failed Only
          schema:
            type: boolean
        - name: limit
          in: query
          description: Limit
          schema:
            type: integer
        - name: offset
          in: query
          description: Offset
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/model.JobExecution"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ErrorResponse"
components:
  schemas:
    handlers.ErrorResponse:
      type: object
      properties:
        error:
          type: string
    model.AMQPJob:
      type: object
      properties:
        body:
          type: string
          description: e.g., "Hello, world!"
        body_encoding:
          type: object
          description: e.g., null, "base64"
          allOf:
            - $ref: "#/components/schemas/model.BodyEncoding"
        connection:
          type: string
          description: e.g., "amqp://guest:guest@localhost:5672/"
        content_type:
          type: string
          description: e.g., "text/plain"
        exchange:
          type: string
          description: e.g., "my_exchange"
        headers:
          type: object
          properties: {}
          description: 'e.g., {"x-delay": 10000}'
        routing_key:
          type: string
          description: e.g., "my_routing_key"
    model.Auth:
      type: object
      properties:
        bearer_token:
          type: string
          description: for "bearer"
        password:
          type: string
          description: for "basic"
        type:
          type: object
          description: e.g., "none", "basic", "bearer"
          allOf:
            - $ref: "#/components/schemas/model.AuthType"
        username:
          type: string
          description: for "basic"
    model.AuthType:
      type: string
      enum:
        - none
        - basic
        - bearer
      x-enum-varnames:
        - AuthTypeNone
        - AuthTypeBasic
        - AuthTypeBearer
    model.BodyEncoding:
      type: string
      enum:
        - base64
      x-enum-varnames:
        - BodyEncodingBase64
    model.HTTPJob:
      type: object
      properties:
        auth:
          type: object
          description: 'e.g., {"type": "basic", "username": "foo", "password": "bar"}'
          allOf:
            - $ref: "#/components/schemas/model.Auth"
        body:
          type: string
          description: 'e.g., "{\"hello\": \"world\"}"'
        headers:
          type: object
          additionalProperties:
            type: string
          description: 'e.g., {"Content-Type": "application/json"}'
        method:
          type: string
          description: e.g., "GET", "POST", "PUT", "PATCH", "DELETE"
        url:
          type: string
          description: e.g., "https://example.com"
        valid_response_codes:
          type: array
          description: e.g., [200, 201, 202]
          items:
            type: integer
    model.Job:
      type: object
      properties:
        amqp_job:
          $ref: "#/components/schemas/model.AMQPJob"
        created_at:
          type: string
        cron_schedule:
          type: string
          description: for recurring jobs
        execute_at:
          type: string
          description: for one-off jobs
        http_job:
          $ref: "#/components/schemas/model.HTTPJob"
        id:
          type: string
        next_run:
          type: string
          description:
            when the job is scheduled to run next (can be null if the job
            is not scheduled to run again)
        status:
          $ref: "#/components/schemas/model.JobStatus"
        type:
          $ref: "#/components/schemas/model.JobType"
        updated_at:
          type: string
    model.JobCreate:
      type: object
      properties:
        amqp_job:
          $ref: "#/components/schemas/model.AMQPJob"
        cron_schedule:
          type: string
          description: for recurring jobs
        execute_at:
          type: string
          description: ExecuteAt and CronSchedule are mutually exclusive.
        http_job:
          type: object
          description: HTTPJob and AMQPJob are mutually exclusive.
          allOf:
            - $ref: "#/components/schemas/model.HTTPJob"
        type:
          type: object
          description: Job type
          allOf:
            - $ref: "#/components/schemas/model.JobType"
    model.JobExecution:
      type: object
      properties:
        end_time:
          type: string
        error_message:
          type: string
        id:
          type: integer
        job_id:
          type: string
        start_time:
          type: string
        success:
          type: boolean
    model.JobStatus:
      type: string
      enum:
        - RUNNING
        - STOPPED
      x-enum-varnames:
        - JobStatusRunning
        - JobStatusStopped
    model.JobType:
      type: string
      enum:
        - HTTP
        - AMQP
      x-enum-varnames:
        - JobTypeHTTP
        - JobTypeAMQP
    model.JobUpdate:
      type: object
      properties:
        amqp:
          $ref: "#/components/schemas/model.AMQPJob"
        cron_schedule:
          type: string
        execute_at:
          type: string
        http:
          $ref: "#/components/schemas/model.HTTPJob"
        type:
          $ref: "#/components/schemas/model.JobType"
